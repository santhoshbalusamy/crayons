/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionToggleEvent } from "./components/accordion/accordion";
import { DataTableColumn, DataTableRow, DropdownVariant, PopoverPlacementType, PopoverTriggerType, TagVariant } from "./utils/types";
import { FormRenderProps, FwFormEventDetail } from "./components/form/form-declaration";
import { ToastOptions } from "./components/toast/toast-util";
export namespace Components {
    interface FwAccordion {
        /**
          * To manage accordion expanded or collapsed state
         */
        "expanded": boolean;
        /**
          * Method available from the component to toggle expanded or collapsed state of accordion
          * @returns promise that resolves to true
         */
        "toggle": () => Promise<boolean>;
        /**
          * The type of accordion to be displayed. default => Accordion with all borders no_bounding_box => Accordion with top and bottom borders only
         */
        "type": 'default' | 'no_bounding_box';
    }
    interface FwAccordionBody {
        "expanded": boolean;
        "type": 'default' | 'no_bounding_box';
    }
    interface FwAccordionTitle {
        "expanded": boolean;
        "toggleState": any;
        /**
          * Truncate title on text overflow
         */
        "truncateOnOverflow": boolean;
        "type": 'default' | 'no_bounding_box';
    }
    interface FwAvatar {
        "alt": string;
        "image": string;
        "initials": string;
        "mode": 'dark' | 'light';
        "name": string;
        "shape": 'circle' | 'square' | 'rounded';
        "size": | 'xxlarge'
    | 'xlarge'
    | 'large'
    | 'medium'
    | 'small'
    | 'xsmall'
    | 'xxsmall';
    }
    interface FwButton {
        /**
          * Identifier of  the theme based on which the button is styled.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Disables the button on the interface. Default value is false.
         */
        "disabled": boolean;
        /**
          * Loading state for the button, Default value is false.
         */
        "loading": boolean;
        /**
          * Accepts the id of the fw-modal component to open it on click.
         */
        "modalTriggerId": string;
        "setFocus": () => Promise<any>;
        /**
          * Caret indicator for the button, Default value is false.
         */
        "showCaretIcon": boolean;
        /**
          * Size of the button.
         */
        "size": 'normal' | 'small' | 'icon';
        /**
          * Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.
         */
        "throttleDelay": number;
        /**
          * Button type based on which actions are performed when the button is clicked.
         */
        "type": 'button' | 'submit';
    }
    interface FwButtonGroup {
        "label": string;
    }
    interface FwCheckbox {
        /**
          * Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked": boolean;
        /**
          * Description to be displayed for the checkbox.
         */
        "description": string;
        /**
          * Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        "handleBlur": (_e: any, _o: any) => void;
        "handleChange": (_e: any, _o: any) => void;
        "handleFocus": (_e: any, _o: any) => void;
        /**
          * @deprecated Use `description` instead. Label displayed on the interface, for the check box.
         */
        "label": string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Return native element
         */
        "nativeRef": () => Promise<HTMLInputElement>;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value": string;
    }
    interface FwCustomCellAnchor {
        "href": string;
        "text": string;
    }
    interface FwCustomCellUser {
        "email": string;
        "image": any;
        "name": string;
    }
    interface FwDataTable {
        /**
          * Columns Array of objects that provides information regarding the columns in the table.
         */
        "columns": DataTableColumn[];
        /**
          * getSelectedIds
          * @returns an array of selected row IDs
         */
        "getSelectedIds": () => Promise<string[]>;
        /**
          * getSelectedRows
          * @returns selected rows from the data table
         */
        "getSelectedRows": () => Promise<DataTableRow[]>;
        /**
          * isSelectable Boolean based on which selectable options appears for rows in the table.
         */
        "isSelectable": boolean;
        /**
          * Label attribute is not visible on screen. There for accessibility purposes.
         */
        "label": string;
        /**
          * Rows Array of objects to be displayed in the table.
         */
        "rows": DataTableRow[];
    }
    interface FwDatepicker {
        /**
          * Format in which the date values selected in the calendar are populated in the input box. Defaults to ISO date format.
         */
        "displayFormat": string;
        /**
          * Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value and valid ISO date format.
         */
        "fromDate": string;
        "getValue": () => Promise<string | { fromDate: string; toDate: string; }>;
        "handleBlur": (_e: any, _o: any) => void;
        "handleInput": (_e: any, _o: any) => void;
        /**
          * Latest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.
         */
        "maxDate": string;
        /**
          * Earliest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.
         */
        "minDate": string;
        /**
          * Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar.
         */
        "mode": 'single date' | 'range';
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Text displayed in the input box before a user selects a date or date range.
         */
        "placeholder": string;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value and valid ISO date format.
         */
        "toDate": string;
        /**
          * Date that is preselected in the calendar, if mode is single date or undefined. If set this must be valid ISO date format.
         */
        "value": string;
    }
    interface FwDropdownButton {
        /**
          * Dropdown Button color
         */
        "color": 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Disables the dropdown button if its true
         */
        "disabled": boolean;
        /**
          * Label for the dropdown button
         */
        "label": string;
        /**
          * Options to show in the dropdown button
         */
        "options": any[];
        /**
          * Placeholder text for search input. Validated only if dropdown and searchable is true
         */
        "placeholder": string;
        /**
          * Displays a searchable dropdown button
         */
        "searchable": boolean;
        /**
          * Displays a split dropdown button
         */
        "split": boolean;
        /**
          * Value of the dropdown button
         */
        "value": any;
    }
    interface FwForm {
        "doReset": () => Promise<void>;
        "doSubmit": () => Promise<void>;
        "initialErrors": any;
        "initialValues": any;
        "renderer": (props: FormRenderProps<any>) => any;
        "validate": any;
        /**
          * Tells Form to validate the form on each input's onBlur event
         */
        "validateOnBlur"?: boolean;
        /**
          * Tells Form to validate the form on each input's onInput event
         */
        "validateOnInput"?: boolean;
        "validationSchema": any;
    }
    interface FwFormWrapper {
        "doReset": () => Promise<void>;
        "doSubmit": () => Promise<void>;
        "formSchema": { title: string; name: string; fields: ({ id: string; type: string; label: string; name: string; position: number; editable: boolean; custom: boolean; inputType: string; placeholder: string; required: boolean; fieldOptions: {}; fields: any[]; field_options?: undefined; filterable?: undefined; searchable?: undefined; link?: undefined; choices?: undefined; optionLabelPath?: undefined; optionValuePath?: undefined; visible?: undefined; deleted?: undefined; hint?: undefined; parent_id?: undefined; parent?: undefined; } | { name: string; label: string; type: string; inputType: string; field_options: {}; filterable: boolean; searchable: boolean; required: boolean; link: string; choices: { id: number; value: string; position: number; }[]; id?: undefined; position?: undefined; editable?: undefined; custom?: undefined; placeholder?: undefined; fieldOptions?: undefined; fields?: undefined; optionLabelPath?: undefined; optionValuePath?: undefined; visible?: undefined; deleted?: undefined; hint?: undefined; parent_id?: undefined; parent?: undefined; } | { id: string; type: string; label: string; name: string; position: number; editable: boolean; custom: boolean; required: boolean; inputType: string; placeholder: string; optionLabelPath: string; optionValuePath: string; choices: { id: string; value: string; position: number; }[]; fields: any[]; fieldOptions?: undefined; field_options?: undefined; filterable?: undefined; searchable?: undefined; link?: undefined; visible?: undefined; deleted?: undefined; hint?: undefined; parent_id?: undefined; parent?: undefined; } | { id: string; name: string; label: string; type: string; inputType: string; position: number; required: boolean; editable: boolean; visible: boolean; deleted: boolean; link: any; placeholder: any; hint: any; field_options: {}; filterable: boolean; searchable: boolean; parent_id: any; choices: { id: number; value: string; position: number; }[]; custom?: undefined; fieldOptions?: undefined; fields?: undefined; optionLabelPath?: undefined; optionValuePath?: undefined; parent?: undefined; } | { id: string; parent: any; type: string; label: string; name: string; position: number; editable: boolean; custom: boolean; required: boolean; inputType: string; placeholder: string; fieldOptions: {}; fields: any[]; field_options?: undefined; filterable?: undefined; searchable?: undefined; link?: undefined; choices?: undefined; optionLabelPath?: undefined; optionValuePath?: undefined; visible?: undefined; deleted?: undefined; hint?: undefined; parent_id?: undefined; })[]; };
        "initialErrors": any;
        "initialValues": { age: string; is_indian_citizen: boolean; };
        "validationSchema": any;
    }
    interface FwFormatNumber {
        /**
          * The currency to use in currency formatting. Possible values are the `ISO 4217` currency codes, such as `USD` for the US dollar, `EUR` for the euro. If the style is "currency", the currency property must be provided.
         */
        "currency": string;
        /**
          * Currency display formatting.
         */
        "currencyDisplay": 'symbol' | 'narrowSymbol' | 'code' | 'name';
        /**
          * In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. You can enable the above by setting the currencySign option to `accounting`. The default value is `standard`
         */
        "currencySign": 'accounting' | 'standard';
        /**
          * `Locale` used for formatting the number
         */
        "locale": string;
        /**
          * The maximum number of fraction digits to use. Possible values are 0 - 20.
         */
        "maximumFractionDigits": number;
        /**
          * The maximum number of significant digits to use,. Possible values are 1 - 21. Default is 21
         */
        "maximumSignificantDigits": number;
        /**
          * The minimum number of fraction digits to use. Possible values are 0 - 20.
         */
        "minimumFractionDigits": number;
        /**
          * The minimum number of integer digits to use. Possible values are 1 - 21. Default is 1
         */
        "minimumIntegerDigits": number;
        /**
          * The minimum number of significant digits to use. Possible values are 1 - 21. Default is 1
         */
        "minimumSignificantDigits": number;
        /**
          * Formatting style
         */
        "type": 'currency' | 'decimal' | 'percent';
        /**
          * Turns on/off grouping separators.
         */
        "useGrouping": boolean;
        /**
          * Number to format.
         */
        "value": number;
    }
    interface FwIcon {
        /**
          * Color in which the icon is displayed, specified as a standard CSS color or as a HEX code.
         */
        "color": string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid JS Import Name of the svg in the named export from @freshworks/crayons-icon.
         */
        "dataSvg": string;
        /**
          * Height of the icon, specified in number of  pixels.
         */
        "height": number;
        /**
          * An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.
         */
        "label": string;
        /**
          * Enable Intersection Observer. Default is false.
         */
        "lazy": boolean;
        /**
          * Name of External Library to be used
         */
        "library": string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid svg Name in the Crayons-Icon set.
         */
        "name": string;
        /**
          * Size of the icon, specified in number of  pixels. This will be square coordinates of (w X h) = size X size
         */
        "size": number;
        /**
          * Identifier of the icon. The attribute’s value must be a valid path to svg file.
         */
        "src": string;
        /**
          * Width of the icon, specified in number of  pixels.
         */
        "width": number;
        /**
          * Root Margin in px or percentage for Intersection-Observer. This means from ref to bottom of loaded view , the item loads when it crosses above the negative y margin.
         */
        "xRootMargin": string;
    }
    interface FwInlineMessage {
        /**
          * Makes the inline message closable.
         */
        "closable": boolean;
        /**
          * The duration in milliseconds for which inline message will be shown.
         */
        "duration": number;
        "hide": () => Promise<void>;
        /**
          * Indicates whether the inline message is open or not.
         */
        "open": boolean;
        "show": () => Promise<void>;
        /**
          * The type of inline message to be displayed. Defaults to info.
         */
        "type": 'success' | 'warning' | 'info' | 'error';
    }
    interface FwInput {
        /**
          * Specifies whether the browser can display suggestions to autocomplete the text value.
         */
        "autocomplete": 'on' | 'off';
        /**
          * Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.
         */
        "clearInput": boolean;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        "handleBlur": (_e: any, _o: any) => void;
        "handleFocus": (_e: any, _o: any) => void;
        "handleInput": (_e: any, _o: any) => void;
        /**
          * Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).
         */
        "iconLeft": string;
        /**
          * Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).
         */
        "iconRight": string;
        /**
          * Label displayed on the interface, for the component.
         */
        "label": string;
        /**
          * Specifies a maximum value that can be entered for the number/decimal input.
         */
        "max"?: number;
        /**
          * Maximum number of characters a user can enter in the text box.
         */
        "maxlength"?: number;
        /**
          * Specifies a minimum value that can be entered for the number/decimal input.
         */
        "min"?: number;
        /**
          * Minimum number of characters a user must enter in the text box for the value to be valid.
         */
        "minlength"?: number;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Return native element
         */
        "nativeRef": () => Promise<HTMLInputElement>;
        /**
          * Text displayed in the text box before a user enters a value.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly": boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Sets focus on a specific `fw-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Theme based on which the text box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Descriptive or instructional text displayed below the text box.
         */
        "stateText": string;
        /**
          * The step attribute is used when the type is `number`. It specifies the interval between legal numbers in a number/decimal input element. Works with the min and max attributes to limit the increments at which a value can be set. Possible values are `any` or a positive floating point number. Default value is `any`
         */
        "step": string;
        /**
          * Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated.
         */
        "type": 'text' | 'number' | 'email' | 'url';
        /**
          * Default value displayed in the input box.
         */
        "value"?: string | null;
    }
    interface FwLabel {
        /**
          * Theme based on which the label is styled.
         */
        "color": 'blue' | 'red' | 'green' | 'yellow' | 'grey' | 'normal';
        /**
          * Display text in the label.
         */
        "value": string;
    }
    interface FwListOptions {
        /**
          * Place a checkbox.
         */
        "checkbox": boolean;
        "clearFilter": () => Promise<void>;
        /**
          * Debounce timer for the search promise function.
         */
        "debounceTimer": number;
        /**
          * The text to filter the options.
         */
        "filterText": any;
        "getSelectedOptions": () => Promise<any>;
        /**
          * Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.
         */
        "max": number;
        /**
          * Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.
         */
        "multiple": boolean;
        /**
          * Text to be displayed when there is no data available in the select.
         */
        "noDataText": string;
        /**
          * Default option to be shown if the option doesn't match the filterText.
         */
        "notFoundText": string;
        /**
          * Value corresponding to the option, that is saved  when the form data is saved.
         */
        "options": any[];
        "scrollToLastSelected": () => Promise<void>;
        /**
          * Filter function which takes in filterText and dataSource and return a Promise. Where filter text is the text to filter the value in dataSource array. The returned promise should contain the array of options to be displayed.
         */
        "search": (text: string, dataSource: any[]) => Promise<any[]>;
        /**
          * Placeholder to placed on the search text box.
         */
        "searchText": string;
        /**
          * Enables the input with in the popup for filtering the options.
         */
        "searchable": boolean;
        /**
          * The option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "selectedOptions": any[];
        "setFocus": () => Promise<any>;
        "setSelectedOptions": (options: any[]) => Promise<any>;
        /**
          * Pass an array of string in case of multi-select or string for single-select.
         */
        "setSelectedValues": (values: string | string[]) => Promise<any>;
        /**
          * Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "value": string | string[];
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "variant": DropdownVariant;
    }
    interface FwModal {
        /**
          * The text for the cancel button
         */
        "cancelText": string;
        /**
          * Method available from the component to perform close action on the modal
          * @returns promise that resolves to true
         */
        "close": () => Promise<boolean>;
        /**
          * The description text to be displayed on the modal
         */
        "description": string;
        /**
          * Hide footer for the modal
         */
        "hideFooter": boolean;
        /**
          * The icon to be displayed with the title
         */
        "icon": string;
        /**
          * Toggle the visibility of the modal
         */
        "isOpen": boolean;
        /**
          * Method available from the component to perform open action on the modal
          * @returns promise that resolves to true
         */
        "open": () => Promise<boolean>;
        /**
          * Size of the modal
         */
        "size": 'standard' | 'small' | 'large';
        /**
          * Convert modal to slider
         */
        "slider": boolean;
        /**
          * The color of submit button
         */
        "submitColor": 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Default state of submit button
         */
        "submitDisabled": boolean;
        /**
          * The text for the submit button
         */
        "submitText": string;
        /**
          * The title text to be displayed on the modal
         */
        "titleText": string;
    }
    interface FwModalContent {
    }
    interface FwModalFooter {
        /**
          * The text for the cancel button
         */
        "cancelText": string;
        /**
          * Function to call on close of modal
         */
        "close": any;
        /**
          * Function to call on submit of modal
         */
        "submit": any;
        /**
          * The color of submit button
         */
        "submitColor": 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Default state of submit button
         */
        "submitDisabled": boolean;
        /**
          * The text for the submit button
         */
        "submitText": string;
    }
    interface FwModalTitle {
        /**
          * The title text to be displayed on the modal
         */
        "description": string;
        /**
          * The icon to be displayed with the title
         */
        "icon": string;
        /**
          * The title text to be displayed on the modal
         */
        "titleText": string;
    }
    interface FwPagination {
        /**
          * Aria Label to be used for the button group.
         */
        "buttonGroupLabel": string;
        /**
          * Indicates if the records in current page are being fetched.
         */
        "isLoading": boolean;
        /**
          * Aria Label to be used for next button.
         */
        "nextButtonLabel": string;
        /**
          * Navigates to next set of records if available.
         */
        "nextPage": () => Promise<void>;
        /**
          * The current page number.
         */
        "page": number;
        /**
          * The number of records to be shown per page. Defaults to 10.
         */
        "perPage": number;
        /**
          * Aria Label to be used for previous button.
         */
        "previousButtonLabel": string;
        /**
          * Navigates to previous set of records if available.
         */
        "previousPage": () => Promise<void>;
        /**
          * The total number of records. This is a mandatory parameter.
         */
        "total": number;
    }
    interface FwPopover {
        /**
          * Whether to focus on the element in popover-content slot on opening the dropdown.
         */
        "autoFocusOnContent": boolean;
        /**
          * The area that the popup will be checked for overflow relative to.
         */
        "boundary": HTMLElement;
        /**
          * Option to disable the popover animation on hide and show.
         */
        "disableTransition": boolean;
        /**
          * Distance defines the distance between the popover trigger and the popover content along y-axis.
         */
        "distance": string;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements": [PopoverPlacementType];
        /**
          * Option to determine if popover-content has a border.
         */
        "hasBorder": boolean;
        "hide": () => Promise<void>;
        /**
          * Indicates whether popover contents should be hidden on pressing Tab.
         */
        "hideOnTab": boolean;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist": boolean;
        /**
          * Placement of the popover content with respect to the popover trigger.
         */
        "placement": PopoverPlacementType;
        /**
          * Whether the popover-content width to be same as that of the popover-trigger.
         */
        "sameWidth": boolean;
        "show": () => Promise<void>;
        /**
          * Skidding defines the distance between the popover trigger and the popover content along x-axis.
         */
        "skidding": string;
        /**
          * The trigger event on which the popover-content is displayed. The available options are 'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.
         */
        "trigger": PopoverTriggerType;
        /**
          * Variant defines the style of the popover-content.
         */
        "variant": 'select' | 'date-picker';
    }
    interface FwProgressLoader {
        /**
          * Method to end the progress. This hides the progress loader
         */
        "done": () => Promise<void>;
        /**
          * Adjust animation settings using easing (a CSS easing string). Default is `ease`
         */
        "easing": string;
        /**
          * Increments the progress status by a random amount.
         */
        "inc": () => Promise<void>;
        /**
          * Changes the minimum percentage used upon starting. Default is `0.08`
         */
        "minimum": number;
        /**
          * Specify a selector to change the parent container. Default is `body` Selector is accessed internally via document.querySelector method
         */
        "parent": string;
        /**
          * Sets the progress loader status, where `n` is a number from `0.0` to `1.0`.
         */
        "set": (n: number) => Promise<void>;
        /**
          * Show progress loader. Default `false`
         */
        "show": boolean;
        /**
          * Add speed (in ms). Default is `200`
         */
        "speed": number;
        /**
          * Method to start showing the progress loader
         */
        "start": () => Promise<void>;
        /**
          * Use Custom markup. To keep the progress bar working, keep an element with class='bar' in there
         */
        "template": string;
        /**
          * Turn on/off the automatic incrementing behavior by setting this to false. Default is `true`
         */
        "trickle": boolean;
        /**
          * Adjust how often to trickle/increment, in ms. Default is `200`
         */
        "trickleSpeed": number;
    }
    interface FwRadio {
        /**
          * Sets the state to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked": boolean;
        /**
          * Description to be displayed for the checkbox.
         */
        "description": string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * @deprecated Use `description` instead. Label displayed on the interface, for the check box.
         */
        "label": string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value": string;
    }
    interface FwRadioGroup {
        /**
          * If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false.
         */
        "allowEmpty": boolean;
        "handleBlur": (_e: any, _o: any) => void;
        "handleChange": (_e: any, _o: any) => void;
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label": string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Indicates the direction of the radio buttons alignment, defaults to vertical alignment.
         */
        "orientation": 'row' | 'column';
        /**
          * Specifies the input radio group as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group.
         */
        "value"?: any | null;
    }
    interface FwSelect {
        /**
          * Whether the arrow/caret should be shown in the select.
         */
        "caret": boolean;
        /**
          * Place a checkbox.
         */
        "checkbox": boolean;
        /**
          * Debounce timer for the search promise function.
         */
        "debounceTimer": number;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * If true, the user must select a value. The default value is not displayed.
         */
        "forceSelect": boolean;
        "getSelectedItem": () => Promise<any>;
        "handleBlur": (_e: any, _o: any) => void;
        "handleChange": (_e: any, _o: any) => void;
        "handleFocus": (_e?: any, _o?: any) => void;
        /**
          * Label displayed on the interface, for the component.
         */
        "label": string;
        /**
          * If the default label prop is not used, then use this prop to pass the id of the label.
         */
        "labelledBy": string;
        /**
          * Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.
         */
        "max": number;
        /**
          * Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.
         */
        "multiple": boolean;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Text to be displayed when there is no data available in the select.
         */
        "noDataText": string;
        /**
          * Default option to be shown if the option doesn't match the filterText.
         */
        "notFoundText": string;
        /**
          * Allow to search for value. Default is true.
         */
        "options": any;
        /**
          * Placement of the options list with respect to select.
         */
        "optionsPlacement": PopoverPlacementType;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "optionsVariant": DropdownVariant;
        /**
          * Text displayed in the list box before an option is selected.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true.
         */
        "readonly": boolean;
        /**
          * Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Whether the select width to be same as that of the options.
         */
        "sameWidth": boolean;
        /**
          * Filter function which takes in filterText and dataSource and return a Promise. Where filter text is the text to filter the value in dataSource array. The returned promise should contain the array of options to be displayed.
         */
        "search": any;
        /**
          * Allow to search for value. Default is true.
         */
        "searchable": boolean;
        /**
          * Array of the options that is displayed as the default selection, in the list box. Must be a valid option corresponding to the fw-select-option components used in Select.
         */
        "selectedOptions": any[];
        "setFocus": () => Promise<any>;
        "setSelectedOptions": (options: any[]) => Promise<any>;
        "setSelectedValues": (values: string | string[]) => Promise<any>;
        /**
          * Theme based on which the list box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Descriptive or instructional text displayed below the list box.
         */
        "stateText": string;
        /**
          * The variant of tag to be used.
         */
        "tagVariant": TagVariant;
        /**
          * Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated.
         */
        "type": 'text' | 'number';
        /**
          * Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "value": any;
        /**
          * The UI variant of the select to be used.
         */
        "variant": 'button' | 'standard' | 'mail';
    }
    interface FwSelectOption {
        /**
          * Place a checkbox.
         */
        "checkbox": boolean;
        /**
          * Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * The props for the graphics variant. ex., icon props in case of graphicsType = 'icon'
         */
        "graphicsProps": any;
        /**
          * Used in grouped list, provides the group in which the option belongs
         */
        "groupName": string;
        /**
          * States that the option is an HTML value. If the attribute's value is undefined, the value is set to true.
         */
        "html": boolean;
        /**
          * HTML content that is displayed as the option.
         */
        "htmlContent"?: string;
        /**
          * Alternate text displayed on the interface, in place of the actual HTML content.
         */
        "optionText": string;
        /**
          * Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.
         */
        "selected": boolean;
        "setFocus": () => Promise<any>;
        /**
          * Second line text can be description etc.
         */
        "subText": string;
        /**
          * The text to be displayed in the option.
         */
        "text": string;
        /**
          * Value corresponding to the option, that is saved  when the form data is saved.
         */
        "value": string;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "variant": DropdownVariant;
    }
    interface FwSkeleton {
        /**
          * Number of rows of current skeleton type
         */
        "count": number;
        /**
          * Custom css styles (background/margins/width/height etc.)
          * @type {({[k: string]: string} | string)}
         */
        "customStyles": { [key: string]: string } | string;
        /**
          * Effect the skeleton will use.
         */
        "effect": 'pulse' | 'sheen' | 'none';
        /**
          * Height of the skeleton ex. 100px, 100%, auto etc.
         */
        "height": string;
        /**
          * MarginBottom of the skeleton ex. 10px, 0 etc.
         */
        "marginBottom": string;
        /**
          * Variant of the skeleton - circle or rectangle or text
         */
        "variant": 'circle' | 'rect' | 'text';
        /**
          * Width of the skeleton ex. 100px, 100%, auto etc.
         */
        "width": string;
    }
    interface FwSpinner {
        /**
          * Color in which the loader is displayed, specified as a standard CSS color.
         */
        "color": string;
        /**
          * Size of the loader.
         */
        "size": 'small' | 'medium' | 'large' | 'default';
    }
    interface FwTab {
        /**
          * Determines whether the tab is active.
         */
        "active": boolean;
        /**
          * Disables this tab
         */
        "disabled": boolean;
        /**
          * The name of the tab panel which this tab controls.
         */
        "panel": string;
        /**
          * Header for the tab to be displayed.
         */
        "tabHeader": string;
        /**
          * Unique name of the tab.
         */
        "tabName": string;
    }
    interface FwTabPanel {
        /**
          * If true sets the panel display to block, none otherwise.
         */
        "active": boolean;
        /**
          * The panel name.
         */
        "name": string;
    }
    interface FwTabs {
        /**
          * The index of the activated Tab(Starts from 0)
         */
        "activeTabIndex": number;
        /**
          * The name of the tab to be activated.
         */
        "activeTabName"?: string;
        /**
          * Describes the purpose of set of tabs.
         */
        "label": string;
        /**
          * The style of tab headers that needs to be displayed, box will display headers in a container.
         */
        "variant": 'box' | 'normal';
    }
    interface FwTag {
        /**
          * Whether the Tag can be closed.
         */
        "closable": boolean;
        /**
          * Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": false;
        /**
          * Whether the Tag is focusable.
         */
        "focusable": boolean;
        /**
          * The props need to be passed for the variant. If the variant is avatar then use this prop to send the props for the fw-avatar component.
         */
        "graphicsProps": {};
        "setFocus": () => Promise<any>;
        /**
          * Display text in the tag component.
         */
        "text": string;
        /**
          * Value associated with the tag component, that is saved when the form data is saved.
         */
        "value": string;
        /**
          * The variant of tag to be displayed.
         */
        "variant": TagVariant;
    }
    interface FwTextarea {
        /**
          * Width of the input box, specified as number of columns.
         */
        "cols"?: number;
        /**
          * Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        "handleBlur": (_e: any, _o: any) => void;
        "handleFocus": (_e: any, _o: any) => void;
        "handleInput": (_e: any, _o: any) => void;
        /**
          * Label displayed on the interface, for the component.
         */
        "label": string;
        /**
          * Maximum number of characters a user can enter in the input box.
         */
        "maxlength"?: number;
        /**
          * Minimum number of characters a user must enter in the input box for the value to be valid.
         */
        "minlength"?: number;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Return native element
         */
        "nativeRef": () => Promise<HTMLTextAreaElement>;
        /**
          * Text displayed in the input box before a user enters a value.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly": boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Height of the input box, specified as number of rows.
         */
        "rows"?: number;
        /**
          * Sets focus on a specific `fw-textarea`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Theme based on which the input box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Descriptive or instructional text displayed below the input box.
         */
        "stateText": string;
        /**
          * Default value displayed in the input box.
         */
        "value"?: string | null;
        /**
          * Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved.
         */
        "wrap": 'soft' | 'hard';
    }
    interface FwTimepicker {
        /**
          * Set true to disable the element
         */
        "disabled": boolean;
        /**
          * Format in which time values are populated in the list box. If the value is hh:mm p, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format.
         */
        "format": 'hh:mm A' | 'HH:mm';
        "handleBlur": (_e: any, _o: any) => void;
        "handleChange": (_e: any, _o: any) => void;
        "handleFocus": (_e?: any, _o?: any) => void;
        /**
          * Time interval between the values displayed in the list, specified in minutes.
         */
        "interval": number;
        /**
          * Upper time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM.
         */
        "maxTime"?: string;
        /**
          * Lower time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM.
         */
        "minTime"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Time output value
         */
        "value"?: string;
    }
    interface FwToast {
        /**
          * The Content of the action link
         */
        "actionLinkText": string;
        /**
          * The content to be displayed in toast
         */
        "content": string;
        /**
          * Pause the toast from hiding on mouse hover
         */
        "pauseOnHover": boolean;
        /**
          * position of the toast notification in screen
         */
        "position": 'top-center' | 'top-left' | 'top-right';
        /**
          * won't close automatically
         */
        "sticky": boolean;
        /**
          * Time duration of the toast visibility
         */
        "timeout": number;
        "trigger": (opts: ToastOptions) => Promise<void>;
        /**
          * Type of the toast - success,failure, warning, inprogress
         */
        "type": 'success' | 'error' | 'warning' | 'inprogress';
    }
    interface FwToastMessage {
        /**
          * The Content of the action link
         */
        "actionLinkText": string;
        /**
          * The content to be displayed in toast
         */
        "content": string;
        /**
          * visibility prop of toast message
         */
        "open": boolean;
        /**
          * Pause the toast from hiding on mouse hover
         */
        "pauseOnHover": boolean;
        /**
          * won't close automatically
         */
        "sticky": boolean;
        /**
          * Time duration of the toast visibility
         */
        "timeout": number;
        /**
          * Type of the toast - success,failure, warning, inprogress
         */
        "type": 'success' | 'error' | 'warning' | 'inprogress';
    }
    interface FwToggle {
        /**
          * Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false.
         */
        "checked": boolean;
        /**
          * Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label": string;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name": string;
        /**
          * Specifies whether to show the check and cancel icons on toggle button. If the attribute’s value is undefined, the value is set to true.
         */
        "showIcon": boolean;
        /**
          * Size of the input control.
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface FwToggleGroup {
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label": string;
        /**
          * Boolean value to allow multiple selection or single child selection
         */
        "multiple": boolean;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        "setSelectedValues": (values: string | string[]) => Promise<void>;
        /**
          * Selected items to be shown - stored in array format - if property "multiple" is set to false, this will always be a single value array
         */
        "value": any;
    }
    interface FwToggleGroupButton {
        /**
          * sets the default base class name and the rest of the class names for the other states are automatically appended to this
         */
        "baseClassName": string;
        /**
          * Label displayed as description in the card.
         */
        "description": string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Label displayed as header in the card.
         */
        "header": string;
        /**
          * If the button type is icon, set the icon path to be used
         */
        "iconName": string;
        /**
          * index attached inside the parent group component
         */
        "index": number;
        /**
          * Enables the component to be used as a part of multi selection group
         */
        "isCheckbox": boolean;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name": string;
        /**
          * Enables the component to be used as a toggle button or just to be used as a normal button
         */
        "selectable": boolean;
        /**
          * Sets the state to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "selected": boolean;
        /**
          * Public method exposed to set the focus for the button component - to be used for accessibility
         */
        "setFocus": () => Promise<void>;
        /**
          * sets the type of the button
         */
        "type": 'card' | 'icon' | 'custom';
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value": string;
    }
    interface FwTooltip {
        /**
          * Content of the tooltip.
         */
        "content": string;
        /**
          * Distance defines the distance between the popover trigger and the popover content along y-axis.
         */
        "distance": string;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements": [PopoverPlacementType];
        /**
          * Hides the tooltip.
          * @returns promise that resolves to true
         */
        "hide": () => Promise<boolean>;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist": boolean;
        /**
          * Placement of the popover content with respect to the popover trigger.
         */
        "placement": PopoverPlacementType;
        /**
          * Shows the tooltip.
          * @returns promise that resolves to true
         */
        "show": () => Promise<boolean>;
        /**
          * The trigger event on which the popover-content is displayed. The available options are 'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.
         */
        "trigger": PopoverTriggerType;
    }
}
declare global {
    interface HTMLFwAccordionElement extends Components.FwAccordion, HTMLStencilElement {
    }
    var HTMLFwAccordionElement: {
        prototype: HTMLFwAccordionElement;
        new (): HTMLFwAccordionElement;
    };
    interface HTMLFwAccordionBodyElement extends Components.FwAccordionBody, HTMLStencilElement {
    }
    var HTMLFwAccordionBodyElement: {
        prototype: HTMLFwAccordionBodyElement;
        new (): HTMLFwAccordionBodyElement;
    };
    interface HTMLFwAccordionTitleElement extends Components.FwAccordionTitle, HTMLStencilElement {
    }
    var HTMLFwAccordionTitleElement: {
        prototype: HTMLFwAccordionTitleElement;
        new (): HTMLFwAccordionTitleElement;
    };
    interface HTMLFwAvatarElement extends Components.FwAvatar, HTMLStencilElement {
    }
    var HTMLFwAvatarElement: {
        prototype: HTMLFwAvatarElement;
        new (): HTMLFwAvatarElement;
    };
    interface HTMLFwButtonElement extends Components.FwButton, HTMLStencilElement {
    }
    var HTMLFwButtonElement: {
        prototype: HTMLFwButtonElement;
        new (): HTMLFwButtonElement;
    };
    interface HTMLFwButtonGroupElement extends Components.FwButtonGroup, HTMLStencilElement {
    }
    var HTMLFwButtonGroupElement: {
        prototype: HTMLFwButtonGroupElement;
        new (): HTMLFwButtonGroupElement;
    };
    interface HTMLFwCheckboxElement extends Components.FwCheckbox, HTMLStencilElement {
    }
    var HTMLFwCheckboxElement: {
        prototype: HTMLFwCheckboxElement;
        new (): HTMLFwCheckboxElement;
    };
    interface HTMLFwCustomCellAnchorElement extends Components.FwCustomCellAnchor, HTMLStencilElement {
    }
    var HTMLFwCustomCellAnchorElement: {
        prototype: HTMLFwCustomCellAnchorElement;
        new (): HTMLFwCustomCellAnchorElement;
    };
    interface HTMLFwCustomCellUserElement extends Components.FwCustomCellUser, HTMLStencilElement {
    }
    var HTMLFwCustomCellUserElement: {
        prototype: HTMLFwCustomCellUserElement;
        new (): HTMLFwCustomCellUserElement;
    };
    interface HTMLFwDataTableElement extends Components.FwDataTable, HTMLStencilElement {
    }
    var HTMLFwDataTableElement: {
        prototype: HTMLFwDataTableElement;
        new (): HTMLFwDataTableElement;
    };
    interface HTMLFwDatepickerElement extends Components.FwDatepicker, HTMLStencilElement {
    }
    var HTMLFwDatepickerElement: {
        prototype: HTMLFwDatepickerElement;
        new (): HTMLFwDatepickerElement;
    };
    interface HTMLFwDropdownButtonElement extends Components.FwDropdownButton, HTMLStencilElement {
    }
    var HTMLFwDropdownButtonElement: {
        prototype: HTMLFwDropdownButtonElement;
        new (): HTMLFwDropdownButtonElement;
    };
    interface HTMLFwFormElement extends Components.FwForm, HTMLStencilElement {
    }
    var HTMLFwFormElement: {
        prototype: HTMLFwFormElement;
        new (): HTMLFwFormElement;
    };
    interface HTMLFwFormWrapperElement extends Components.FwFormWrapper, HTMLStencilElement {
    }
    var HTMLFwFormWrapperElement: {
        prototype: HTMLFwFormWrapperElement;
        new (): HTMLFwFormWrapperElement;
    };
    interface HTMLFwFormatNumberElement extends Components.FwFormatNumber, HTMLStencilElement {
    }
    var HTMLFwFormatNumberElement: {
        prototype: HTMLFwFormatNumberElement;
        new (): HTMLFwFormatNumberElement;
    };
    interface HTMLFwIconElement extends Components.FwIcon, HTMLStencilElement {
    }
    var HTMLFwIconElement: {
        prototype: HTMLFwIconElement;
        new (): HTMLFwIconElement;
    };
    interface HTMLFwInlineMessageElement extends Components.FwInlineMessage, HTMLStencilElement {
    }
    var HTMLFwInlineMessageElement: {
        prototype: HTMLFwInlineMessageElement;
        new (): HTMLFwInlineMessageElement;
    };
    interface HTMLFwInputElement extends Components.FwInput, HTMLStencilElement {
    }
    var HTMLFwInputElement: {
        prototype: HTMLFwInputElement;
        new (): HTMLFwInputElement;
    };
    interface HTMLFwLabelElement extends Components.FwLabel, HTMLStencilElement {
    }
    var HTMLFwLabelElement: {
        prototype: HTMLFwLabelElement;
        new (): HTMLFwLabelElement;
    };
    interface HTMLFwListOptionsElement extends Components.FwListOptions, HTMLStencilElement {
    }
    var HTMLFwListOptionsElement: {
        prototype: HTMLFwListOptionsElement;
        new (): HTMLFwListOptionsElement;
    };
    interface HTMLFwModalElement extends Components.FwModal, HTMLStencilElement {
    }
    var HTMLFwModalElement: {
        prototype: HTMLFwModalElement;
        new (): HTMLFwModalElement;
    };
    interface HTMLFwModalContentElement extends Components.FwModalContent, HTMLStencilElement {
    }
    var HTMLFwModalContentElement: {
        prototype: HTMLFwModalContentElement;
        new (): HTMLFwModalContentElement;
    };
    interface HTMLFwModalFooterElement extends Components.FwModalFooter, HTMLStencilElement {
    }
    var HTMLFwModalFooterElement: {
        prototype: HTMLFwModalFooterElement;
        new (): HTMLFwModalFooterElement;
    };
    interface HTMLFwModalTitleElement extends Components.FwModalTitle, HTMLStencilElement {
    }
    var HTMLFwModalTitleElement: {
        prototype: HTMLFwModalTitleElement;
        new (): HTMLFwModalTitleElement;
    };
    interface HTMLFwPaginationElement extends Components.FwPagination, HTMLStencilElement {
    }
    var HTMLFwPaginationElement: {
        prototype: HTMLFwPaginationElement;
        new (): HTMLFwPaginationElement;
    };
    interface HTMLFwPopoverElement extends Components.FwPopover, HTMLStencilElement {
    }
    var HTMLFwPopoverElement: {
        prototype: HTMLFwPopoverElement;
        new (): HTMLFwPopoverElement;
    };
    interface HTMLFwProgressLoaderElement extends Components.FwProgressLoader, HTMLStencilElement {
    }
    var HTMLFwProgressLoaderElement: {
        prototype: HTMLFwProgressLoaderElement;
        new (): HTMLFwProgressLoaderElement;
    };
    interface HTMLFwRadioElement extends Components.FwRadio, HTMLStencilElement {
    }
    var HTMLFwRadioElement: {
        prototype: HTMLFwRadioElement;
        new (): HTMLFwRadioElement;
    };
    interface HTMLFwRadioGroupElement extends Components.FwRadioGroup, HTMLStencilElement {
    }
    var HTMLFwRadioGroupElement: {
        prototype: HTMLFwRadioGroupElement;
        new (): HTMLFwRadioGroupElement;
    };
    interface HTMLFwSelectElement extends Components.FwSelect, HTMLStencilElement {
    }
    var HTMLFwSelectElement: {
        prototype: HTMLFwSelectElement;
        new (): HTMLFwSelectElement;
    };
    interface HTMLFwSelectOptionElement extends Components.FwSelectOption, HTMLStencilElement {
    }
    var HTMLFwSelectOptionElement: {
        prototype: HTMLFwSelectOptionElement;
        new (): HTMLFwSelectOptionElement;
    };
    interface HTMLFwSkeletonElement extends Components.FwSkeleton, HTMLStencilElement {
    }
    var HTMLFwSkeletonElement: {
        prototype: HTMLFwSkeletonElement;
        new (): HTMLFwSkeletonElement;
    };
    interface HTMLFwSpinnerElement extends Components.FwSpinner, HTMLStencilElement {
    }
    var HTMLFwSpinnerElement: {
        prototype: HTMLFwSpinnerElement;
        new (): HTMLFwSpinnerElement;
    };
    interface HTMLFwTabElement extends Components.FwTab, HTMLStencilElement {
    }
    var HTMLFwTabElement: {
        prototype: HTMLFwTabElement;
        new (): HTMLFwTabElement;
    };
    interface HTMLFwTabPanelElement extends Components.FwTabPanel, HTMLStencilElement {
    }
    var HTMLFwTabPanelElement: {
        prototype: HTMLFwTabPanelElement;
        new (): HTMLFwTabPanelElement;
    };
    interface HTMLFwTabsElement extends Components.FwTabs, HTMLStencilElement {
    }
    var HTMLFwTabsElement: {
        prototype: HTMLFwTabsElement;
        new (): HTMLFwTabsElement;
    };
    interface HTMLFwTagElement extends Components.FwTag, HTMLStencilElement {
    }
    var HTMLFwTagElement: {
        prototype: HTMLFwTagElement;
        new (): HTMLFwTagElement;
    };
    interface HTMLFwTextareaElement extends Components.FwTextarea, HTMLStencilElement {
    }
    var HTMLFwTextareaElement: {
        prototype: HTMLFwTextareaElement;
        new (): HTMLFwTextareaElement;
    };
    interface HTMLFwTimepickerElement extends Components.FwTimepicker, HTMLStencilElement {
    }
    var HTMLFwTimepickerElement: {
        prototype: HTMLFwTimepickerElement;
        new (): HTMLFwTimepickerElement;
    };
    interface HTMLFwToastElement extends Components.FwToast, HTMLStencilElement {
    }
    var HTMLFwToastElement: {
        prototype: HTMLFwToastElement;
        new (): HTMLFwToastElement;
    };
    interface HTMLFwToastMessageElement extends Components.FwToastMessage, HTMLStencilElement {
    }
    var HTMLFwToastMessageElement: {
        prototype: HTMLFwToastMessageElement;
        new (): HTMLFwToastMessageElement;
    };
    interface HTMLFwToggleElement extends Components.FwToggle, HTMLStencilElement {
    }
    var HTMLFwToggleElement: {
        prototype: HTMLFwToggleElement;
        new (): HTMLFwToggleElement;
    };
    interface HTMLFwToggleGroupElement extends Components.FwToggleGroup, HTMLStencilElement {
    }
    var HTMLFwToggleGroupElement: {
        prototype: HTMLFwToggleGroupElement;
        new (): HTMLFwToggleGroupElement;
    };
    interface HTMLFwToggleGroupButtonElement extends Components.FwToggleGroupButton, HTMLStencilElement {
    }
    var HTMLFwToggleGroupButtonElement: {
        prototype: HTMLFwToggleGroupButtonElement;
        new (): HTMLFwToggleGroupButtonElement;
    };
    interface HTMLFwTooltipElement extends Components.FwTooltip, HTMLStencilElement {
    }
    var HTMLFwTooltipElement: {
        prototype: HTMLFwTooltipElement;
        new (): HTMLFwTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "fw-accordion": HTMLFwAccordionElement;
        "fw-accordion-body": HTMLFwAccordionBodyElement;
        "fw-accordion-title": HTMLFwAccordionTitleElement;
        "fw-avatar": HTMLFwAvatarElement;
        "fw-button": HTMLFwButtonElement;
        "fw-button-group": HTMLFwButtonGroupElement;
        "fw-checkbox": HTMLFwCheckboxElement;
        "fw-custom-cell-anchor": HTMLFwCustomCellAnchorElement;
        "fw-custom-cell-user": HTMLFwCustomCellUserElement;
        "fw-data-table": HTMLFwDataTableElement;
        "fw-datepicker": HTMLFwDatepickerElement;
        "fw-dropdown-button": HTMLFwDropdownButtonElement;
        "fw-form": HTMLFwFormElement;
        "fw-form-wrapper": HTMLFwFormWrapperElement;
        "fw-format-number": HTMLFwFormatNumberElement;
        "fw-icon": HTMLFwIconElement;
        "fw-inline-message": HTMLFwInlineMessageElement;
        "fw-input": HTMLFwInputElement;
        "fw-label": HTMLFwLabelElement;
        "fw-list-options": HTMLFwListOptionsElement;
        "fw-modal": HTMLFwModalElement;
        "fw-modal-content": HTMLFwModalContentElement;
        "fw-modal-footer": HTMLFwModalFooterElement;
        "fw-modal-title": HTMLFwModalTitleElement;
        "fw-pagination": HTMLFwPaginationElement;
        "fw-popover": HTMLFwPopoverElement;
        "fw-progress-loader": HTMLFwProgressLoaderElement;
        "fw-radio": HTMLFwRadioElement;
        "fw-radio-group": HTMLFwRadioGroupElement;
        "fw-select": HTMLFwSelectElement;
        "fw-select-option": HTMLFwSelectOptionElement;
        "fw-skeleton": HTMLFwSkeletonElement;
        "fw-spinner": HTMLFwSpinnerElement;
        "fw-tab": HTMLFwTabElement;
        "fw-tab-panel": HTMLFwTabPanelElement;
        "fw-tabs": HTMLFwTabsElement;
        "fw-tag": HTMLFwTagElement;
        "fw-textarea": HTMLFwTextareaElement;
        "fw-timepicker": HTMLFwTimepickerElement;
        "fw-toast": HTMLFwToastElement;
        "fw-toast-message": HTMLFwToastMessageElement;
        "fw-toggle": HTMLFwToggleElement;
        "fw-toggle-group": HTMLFwToggleGroupElement;
        "fw-toggle-group-button": HTMLFwToggleGroupButtonElement;
        "fw-tooltip": HTMLFwTooltipElement;
    }
}
declare namespace LocalJSX {
    interface FwAccordion {
        /**
          * To manage accordion expanded or collapsed state
         */
        "expanded"?: boolean;
        /**
          * Triggered when the accordion is expanded or collapsed
         */
        "onFwAccordionToggle"?: (event: CustomEvent<AccordionToggleEvent>) => void;
        /**
          * The type of accordion to be displayed. default => Accordion with all borders no_bounding_box => Accordion with top and bottom borders only
         */
        "type"?: 'default' | 'no_bounding_box';
    }
    interface FwAccordionBody {
        "expanded"?: boolean;
        "type"?: 'default' | 'no_bounding_box';
    }
    interface FwAccordionTitle {
        "expanded"?: boolean;
        "toggleState"?: any;
        /**
          * Truncate title on text overflow
         */
        "truncateOnOverflow"?: boolean;
        "type"?: 'default' | 'no_bounding_box';
    }
    interface FwAvatar {
        "alt"?: string;
        "image"?: string;
        "initials"?: string;
        "mode"?: 'dark' | 'light';
        "name"?: string;
        "shape"?: 'circle' | 'square' | 'rounded';
        "size"?: | 'xxlarge'
    | 'xlarge'
    | 'large'
    | 'medium'
    | 'small'
    | 'xsmall'
    | 'xxsmall';
    }
    interface FwButton {
        /**
          * Identifier of  the theme based on which the button is styled.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Disables the button on the interface. Default value is false.
         */
        "disabled"?: boolean;
        /**
          * Loading state for the button, Default value is false.
         */
        "loading"?: boolean;
        /**
          * Accepts the id of the fw-modal component to open it on click.
         */
        "modalTriggerId"?: string;
        /**
          * Triggered when the button loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the button is clicked.
         */
        "onFwClick"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the button comes into focus.
         */
        "onFwFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Caret indicator for the button, Default value is false.
         */
        "showCaretIcon"?: boolean;
        /**
          * Size of the button.
         */
        "size"?: 'normal' | 'small' | 'icon';
        /**
          * Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.
         */
        "throttleDelay"?: number;
        /**
          * Button type based on which actions are performed when the button is clicked.
         */
        "type"?: 'button' | 'submit';
    }
    interface FwButtonGroup {
        "label"?: string;
    }
    interface FwCheckbox {
        /**
          * Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked"?: boolean;
        /**
          * Description to be displayed for the checkbox.
         */
        "description"?: string;
        /**
          * Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        "handleBlur"?: (_e: any, _o: any) => void;
        "handleChange"?: (_e: any, _o: any) => void;
        "handleFocus"?: (_e: any, _o: any) => void;
        /**
          * @deprecated Use `description` instead. Label displayed on the interface, for the check box.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the check box loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the check box’s value is modified.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the check box comes into focus.
         */
        "onFwFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value"?: string;
    }
    interface FwCustomCellAnchor {
        "href"?: string;
        "text"?: string;
    }
    interface FwCustomCellUser {
        "email"?: string;
        "image"?: any;
        "name"?: string;
    }
    interface FwDataTable {
        /**
          * Columns Array of objects that provides information regarding the columns in the table.
         */
        "columns"?: DataTableColumn[];
        /**
          * isSelectable Boolean based on which selectable options appears for rows in the table.
         */
        "isSelectable"?: boolean;
        /**
          * Label attribute is not visible on screen. There for accessibility purposes.
         */
        "label"?: string;
        /**
          * fwSelectionChange Emits this event when row is selected/unselected.
         */
        "onFwSelectionChange"?: (event: CustomEvent<any>) => void;
        /**
          * Rows Array of objects to be displayed in the table.
         */
        "rows"?: DataTableRow[];
    }
    interface FwDatepicker {
        /**
          * Format in which the date values selected in the calendar are populated in the input box. Defaults to ISO date format.
         */
        "displayFormat"?: string;
        /**
          * Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value and valid ISO date format.
         */
        "fromDate"?: string;
        "handleBlur"?: (_e: any, _o: any) => void;
        "handleInput"?: (_e: any, _o: any) => void;
        /**
          * Latest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.
         */
        "maxDate"?: string;
        /**
          * Earliest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.
         */
        "minDate"?: string;
        /**
          * Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar.
         */
        "mode"?: 'single date' | 'range';
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the update button clicked
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Text displayed in the input box before a user selects a date or date range.
         */
        "placeholder"?: string;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value and valid ISO date format.
         */
        "toDate"?: string;
        /**
          * Date that is preselected in the calendar, if mode is single date or undefined. If set this must be valid ISO date format.
         */
        "value"?: string;
    }
    interface FwDropdownButton {
        /**
          * Dropdown Button color
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Disables the dropdown button if its true
         */
        "disabled"?: boolean;
        /**
          * Label for the dropdown button
         */
        "label"?: string;
        /**
          * Triggered when an option is clicked
         */
        "onFwOptionClick"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when Add button for searchable dropdown is clicked
         */
        "onFwOptionsAdd"?: (event: CustomEvent<any>) => void;
        /**
          * Options to show in the dropdown button
         */
        "options"?: any[];
        /**
          * Placeholder text for search input. Validated only if dropdown and searchable is true
         */
        "placeholder"?: string;
        /**
          * Displays a searchable dropdown button
         */
        "searchable"?: boolean;
        /**
          * Displays a split dropdown button
         */
        "split"?: boolean;
        /**
          * Value of the dropdown button
         */
        "value"?: any;
    }
    interface FwForm {
        "initialErrors"?: any;
        "initialValues"?: any;
        "onFwFormSubmit"?: (event: CustomEvent<FwFormEventDetail>) => void;
        "renderer"?: (props: FormRenderProps<any>) => any;
        "validate"?: any;
        /**
          * Tells Form to validate the form on each input's onBlur event
         */
        "validateOnBlur"?: boolean;
        /**
          * Tells Form to validate the form on each input's onInput event
         */
        "validateOnInput"?: boolean;
        "validationSchema"?: any;
    }
    interface FwFormWrapper {
        "formSchema"?: { title: string; name: string; fields: ({ id: string; type: string; label: string; name: string; position: number; editable: boolean; custom: boolean; inputType: string; placeholder: string; required: boolean; fieldOptions: {}; fields: any[]; field_options?: undefined; filterable?: undefined; searchable?: undefined; link?: undefined; choices?: undefined; optionLabelPath?: undefined; optionValuePath?: undefined; visible?: undefined; deleted?: undefined; hint?: undefined; parent_id?: undefined; parent?: undefined; } | { name: string; label: string; type: string; inputType: string; field_options: {}; filterable: boolean; searchable: boolean; required: boolean; link: string; choices: { id: number; value: string; position: number; }[]; id?: undefined; position?: undefined; editable?: undefined; custom?: undefined; placeholder?: undefined; fieldOptions?: undefined; fields?: undefined; optionLabelPath?: undefined; optionValuePath?: undefined; visible?: undefined; deleted?: undefined; hint?: undefined; parent_id?: undefined; parent?: undefined; } | { id: string; type: string; label: string; name: string; position: number; editable: boolean; custom: boolean; required: boolean; inputType: string; placeholder: string; optionLabelPath: string; optionValuePath: string; choices: { id: string; value: string; position: number; }[]; fields: any[]; fieldOptions?: undefined; field_options?: undefined; filterable?: undefined; searchable?: undefined; link?: undefined; visible?: undefined; deleted?: undefined; hint?: undefined; parent_id?: undefined; parent?: undefined; } | { id: string; name: string; label: string; type: string; inputType: string; position: number; required: boolean; editable: boolean; visible: boolean; deleted: boolean; link: any; placeholder: any; hint: any; field_options: {}; filterable: boolean; searchable: boolean; parent_id: any; choices: { id: number; value: string; position: number; }[]; custom?: undefined; fieldOptions?: undefined; fields?: undefined; optionLabelPath?: undefined; optionValuePath?: undefined; parent?: undefined; } | { id: string; parent: any; type: string; label: string; name: string; position: number; editable: boolean; custom: boolean; required: boolean; inputType: string; placeholder: string; fieldOptions: {}; fields: any[]; field_options?: undefined; filterable?: undefined; searchable?: undefined; link?: undefined; choices?: undefined; optionLabelPath?: undefined; optionValuePath?: undefined; visible?: undefined; deleted?: undefined; hint?: undefined; parent_id?: undefined; })[]; };
        "initialErrors"?: any;
        "initialValues"?: { age: string; is_indian_citizen: boolean; };
        "validationSchema"?: any;
    }
    interface FwFormatNumber {
        /**
          * The currency to use in currency formatting. Possible values are the `ISO 4217` currency codes, such as `USD` for the US dollar, `EUR` for the euro. If the style is "currency", the currency property must be provided.
         */
        "currency"?: string;
        /**
          * Currency display formatting.
         */
        "currencyDisplay"?: 'symbol' | 'narrowSymbol' | 'code' | 'name';
        /**
          * In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. You can enable the above by setting the currencySign option to `accounting`. The default value is `standard`
         */
        "currencySign"?: 'accounting' | 'standard';
        /**
          * `Locale` used for formatting the number
         */
        "locale"?: string;
        /**
          * The maximum number of fraction digits to use. Possible values are 0 - 20.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use,. Possible values are 1 - 21. Default is 21
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use. Possible values are 0 - 20.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use. Possible values are 1 - 21. Default is 1
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use. Possible values are 1 - 21. Default is 1
         */
        "minimumSignificantDigits"?: number;
        /**
          * Formatting style
         */
        "type"?: 'currency' | 'decimal' | 'percent';
        /**
          * Turns on/off grouping separators.
         */
        "useGrouping"?: boolean;
        /**
          * Number to format.
         */
        "value"?: number;
    }
    interface FwIcon {
        /**
          * Color in which the icon is displayed, specified as a standard CSS color or as a HEX code.
         */
        "color"?: string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid JS Import Name of the svg in the named export from @freshworks/crayons-icon.
         */
        "dataSvg"?: string;
        /**
          * Height of the icon, specified in number of  pixels.
         */
        "height"?: number;
        /**
          * An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.
         */
        "label"?: string;
        /**
          * Enable Intersection Observer. Default is false.
         */
        "lazy"?: boolean;
        /**
          * Name of External Library to be used
         */
        "library"?: string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid svg Name in the Crayons-Icon set.
         */
        "name"?: string;
        /**
          * Size of the icon, specified in number of  pixels. This will be square coordinates of (w X h) = size X size
         */
        "size"?: number;
        /**
          * Identifier of the icon. The attribute’s value must be a valid path to svg file.
         */
        "src"?: string;
        /**
          * Width of the icon, specified in number of  pixels.
         */
        "width"?: number;
        /**
          * Root Margin in px or percentage for Intersection-Observer. This means from ref to bottom of loaded view , the item loads when it crosses above the negative y margin.
         */
        "xRootMargin"?: string;
    }
    interface FwInlineMessage {
        /**
          * Makes the inline message closable.
         */
        "closable"?: boolean;
        /**
          * The duration in milliseconds for which inline message will be shown.
         */
        "duration"?: number;
        /**
          * Triggered when inline message is hidden.
         */
        "onFwHide"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when inline message is shown.
         */
        "onFwShow"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates whether the inline message is open or not.
         */
        "open"?: boolean;
        /**
          * The type of inline message to be displayed. Defaults to info.
         */
        "type"?: 'success' | 'warning' | 'info' | 'error';
    }
    interface FwInput {
        /**
          * Specifies whether the browser can display suggestions to autocomplete the text value.
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.
         */
        "clearInput"?: boolean;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        "handleBlur"?: (_e: any, _o: any) => void;
        "handleFocus"?: (_e: any, _o: any) => void;
        "handleInput"?: (_e: any, _o: any) => void;
        /**
          * Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).
         */
        "iconLeft"?: string;
        /**
          * Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).
         */
        "iconRight"?: string;
        /**
          * Label displayed on the interface, for the component.
         */
        "label"?: string;
        /**
          * Specifies a maximum value that can be entered for the number/decimal input.
         */
        "max"?: number;
        /**
          * Maximum number of characters a user can enter in the text box.
         */
        "maxlength"?: number;
        /**
          * Specifies a minimum value that can be entered for the number/decimal input.
         */
        "min"?: number;
        /**
          * Minimum number of characters a user must enter in the text box for the value to be valid.
         */
        "minlength"?: number;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the input box loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the value in the input box is modified.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the input box comes into focus.
         */
        "onFwFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when a value is entered in the input box.
         */
        "onFwInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Triggered when clear icon is clicked.
         */
        "onFwInputClear"?: (event: CustomEvent<any>) => void;
        /**
          * Text displayed in the text box before a user enters a value.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly"?: boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Theme based on which the text box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Descriptive or instructional text displayed below the text box.
         */
        "stateText"?: string;
        /**
          * The step attribute is used when the type is `number`. It specifies the interval between legal numbers in a number/decimal input element. Works with the min and max attributes to limit the increments at which a value can be set. Possible values are `any` or a positive floating point number. Default value is `any`
         */
        "step"?: string;
        /**
          * Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated.
         */
        "type"?: 'text' | 'number' | 'email' | 'url';
        /**
          * Default value displayed in the input box.
         */
        "value"?: string | null;
    }
    interface FwLabel {
        /**
          * Theme based on which the label is styled.
         */
        "color"?: 'blue' | 'red' | 'green' | 'yellow' | 'grey' | 'normal';
        /**
          * Display text in the label.
         */
        "value"?: string;
    }
    interface FwListOptions {
        /**
          * Place a checkbox.
         */
        "checkbox"?: boolean;
        /**
          * Debounce timer for the search promise function.
         */
        "debounceTimer"?: number;
        /**
          * The text to filter the options.
         */
        "filterText"?: any;
        /**
          * Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.
         */
        "max"?: number;
        /**
          * Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.
         */
        "multiple"?: boolean;
        /**
          * Text to be displayed when there is no data available in the select.
         */
        "noDataText"?: string;
        /**
          * Default option to be shown if the option doesn't match the filterText.
         */
        "notFoundText"?: string;
        /**
          * Triggered when a value is selected or deselected from the list box options.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the options list is in loading state processing the search function.
         */
        "onFwLoading"?: (event: CustomEvent<any>) => void;
        /**
          * Value corresponding to the option, that is saved  when the form data is saved.
         */
        "options"?: any[];
        /**
          * Filter function which takes in filterText and dataSource and return a Promise. Where filter text is the text to filter the value in dataSource array. The returned promise should contain the array of options to be displayed.
         */
        "search"?: (text: string, dataSource: any[]) => Promise<any[]>;
        /**
          * Placeholder to placed on the search text box.
         */
        "searchText"?: string;
        /**
          * Enables the input with in the popup for filtering the options.
         */
        "searchable"?: boolean;
        /**
          * The option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "selectedOptions"?: any[];
        /**
          * Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "value"?: string | string[];
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "variant"?: DropdownVariant;
    }
    interface FwModal {
        /**
          * The text for the cancel button
         */
        "cancelText"?: string;
        /**
          * The description text to be displayed on the modal
         */
        "description"?: string;
        /**
          * Hide footer for the modal
         */
        "hideFooter"?: boolean;
        /**
          * The icon to be displayed with the title
         */
        "icon"?: string;
        /**
          * Toggle the visibility of the modal
         */
        "isOpen"?: boolean;
        /**
          * Triggered when modal is closed.
         */
        "onFwClose"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when modal is opened.
         */
        "onFwOpen"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the default action button is clicked.
         */
        "onFwSubmit"?: (event: CustomEvent<void>) => void;
        /**
          * Size of the modal
         */
        "size"?: 'standard' | 'small' | 'large';
        /**
          * Convert modal to slider
         */
        "slider"?: boolean;
        /**
          * The color of submit button
         */
        "submitColor"?: 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Default state of submit button
         */
        "submitDisabled"?: boolean;
        /**
          * The text for the submit button
         */
        "submitText"?: string;
        /**
          * The title text to be displayed on the modal
         */
        "titleText"?: string;
    }
    interface FwModalContent {
    }
    interface FwModalFooter {
        /**
          * The text for the cancel button
         */
        "cancelText"?: string;
        /**
          * Function to call on close of modal
         */
        "close"?: any;
        /**
          * Function to call on submit of modal
         */
        "submit"?: any;
        /**
          * The color of submit button
         */
        "submitColor"?: 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Default state of submit button
         */
        "submitDisabled"?: boolean;
        /**
          * The text for the submit button
         */
        "submitText"?: string;
    }
    interface FwModalTitle {
        /**
          * The title text to be displayed on the modal
         */
        "description"?: string;
        /**
          * The icon to be displayed with the title
         */
        "icon"?: string;
        /**
          * The title text to be displayed on the modal
         */
        "titleText"?: string;
    }
    interface FwPagination {
        /**
          * Aria Label to be used for the button group.
         */
        "buttonGroupLabel"?: string;
        /**
          * Indicates if the records in current page are being fetched.
         */
        "isLoading"?: boolean;
        /**
          * Aria Label to be used for next button.
         */
        "nextButtonLabel"?: string;
        /**
          * Triggered when either previous or next button is clicked.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * The current page number.
         */
        "page"?: number;
        /**
          * The number of records to be shown per page. Defaults to 10.
         */
        "perPage"?: number;
        /**
          * Aria Label to be used for previous button.
         */
        "previousButtonLabel"?: string;
        /**
          * The total number of records. This is a mandatory parameter.
         */
        "total"?: number;
    }
    interface FwPopover {
        /**
          * Whether to focus on the element in popover-content slot on opening the dropdown.
         */
        "autoFocusOnContent"?: boolean;
        /**
          * The area that the popup will be checked for overflow relative to.
         */
        "boundary"?: HTMLElement;
        /**
          * Option to disable the popover animation on hide and show.
         */
        "disableTransition"?: boolean;
        /**
          * Distance defines the distance between the popover trigger and the popover content along y-axis.
         */
        "distance"?: string;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements"?: [PopoverPlacementType];
        /**
          * Option to determine if popover-content has a border.
         */
        "hasBorder"?: boolean;
        /**
          * Indicates whether popover contents should be hidden on pressing Tab.
         */
        "hideOnTab"?: boolean;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Triggered whenever the popover contents is closed/hidden.
         */
        "onFwHide"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered whenever the popover contents is open/displayed.
         */
        "onFwShow"?: (event: CustomEvent<any>) => void;
        /**
          * Placement of the popover content with respect to the popover trigger.
         */
        "placement"?: PopoverPlacementType;
        /**
          * Whether the popover-content width to be same as that of the popover-trigger.
         */
        "sameWidth"?: boolean;
        /**
          * Skidding defines the distance between the popover trigger and the popover content along x-axis.
         */
        "skidding"?: string;
        /**
          * The trigger event on which the popover-content is displayed. The available options are 'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.
         */
        "trigger"?: PopoverTriggerType;
        /**
          * Variant defines the style of the popover-content.
         */
        "variant"?: 'select' | 'date-picker';
    }
    interface FwProgressLoader {
        /**
          * Adjust animation settings using easing (a CSS easing string). Default is `ease`
         */
        "easing"?: string;
        /**
          * Changes the minimum percentage used upon starting. Default is `0.08`
         */
        "minimum"?: number;
        /**
          * Specify a selector to change the parent container. Default is `body` Selector is accessed internally via document.querySelector method
         */
        "parent"?: string;
        /**
          * Show progress loader. Default `false`
         */
        "show"?: boolean;
        /**
          * Add speed (in ms). Default is `200`
         */
        "speed"?: number;
        /**
          * Use Custom markup. To keep the progress bar working, keep an element with class='bar' in there
         */
        "template"?: string;
        /**
          * Turn on/off the automatic incrementing behavior by setting this to false. Default is `true`
         */
        "trickle"?: boolean;
        /**
          * Adjust how often to trickle/increment, in ms. Default is `200`
         */
        "trickleSpeed"?: number;
    }
    interface FwRadio {
        /**
          * Sets the state to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked"?: boolean;
        /**
          * Description to be displayed for the checkbox.
         */
        "description"?: string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * @deprecated Use `description` instead. Label displayed on the interface, for the check box.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the radio button loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the radio button in focus is cleared.
         */
        "onFwDeselect"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the radio button comes into focus.
         */
        "onFwFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the radio button in focus is selected.
         */
        "onFwSelect"?: (event: CustomEvent<any>) => void;
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value"?: string;
    }
    interface FwRadioGroup {
        /**
          * If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false.
         */
        "allowEmpty"?: boolean;
        "handleBlur"?: (_e: any, _o: any) => void;
        "handleChange"?: (_e: any, _o: any) => void;
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when an option in the Radio Group is selected or deselected.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates the direction of the radio buttons alignment, defaults to vertical alignment.
         */
        "orientation"?: 'row' | 'column';
        /**
          * Specifies the input radio group as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group.
         */
        "value"?: any | null;
    }
    interface FwSelect {
        /**
          * Whether the arrow/caret should be shown in the select.
         */
        "caret"?: boolean;
        /**
          * Place a checkbox.
         */
        "checkbox"?: boolean;
        /**
          * Debounce timer for the search promise function.
         */
        "debounceTimer"?: number;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * If true, the user must select a value. The default value is not displayed.
         */
        "forceSelect"?: boolean;
        "handleBlur"?: (_e: any, _o: any) => void;
        "handleChange"?: (_e: any, _o: any) => void;
        "handleFocus"?: (_e?: any, _o?: any) => void;
        /**
          * Label displayed on the interface, for the component.
         */
        "label"?: string;
        /**
          * If the default label prop is not used, then use this prop to pass the id of the label.
         */
        "labelledBy"?: string;
        /**
          * Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.
         */
        "max"?: number;
        /**
          * Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.
         */
        "multiple"?: boolean;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Text to be displayed when there is no data available in the select.
         */
        "noDataText"?: string;
        /**
          * Default option to be shown if the option doesn't match the filterText.
         */
        "notFoundText"?: string;
        /**
          * Triggered when the list box loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when a value is selected or deselected from the list box options.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the list box comes into focus.
         */
        "onFwFocus"?: (event: CustomEvent<any>) => void;
        /**
          * Allow to search for value. Default is true.
         */
        "options"?: any;
        /**
          * Placement of the options list with respect to select.
         */
        "optionsPlacement"?: PopoverPlacementType;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "optionsVariant"?: DropdownVariant;
        /**
          * Text displayed in the list box before an option is selected.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true.
         */
        "readonly"?: boolean;
        /**
          * Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Whether the select width to be same as that of the options.
         */
        "sameWidth"?: boolean;
        /**
          * Filter function which takes in filterText and dataSource and return a Promise. Where filter text is the text to filter the value in dataSource array. The returned promise should contain the array of options to be displayed.
         */
        "search"?: any;
        /**
          * Allow to search for value. Default is true.
         */
        "searchable"?: boolean;
        /**
          * Array of the options that is displayed as the default selection, in the list box. Must be a valid option corresponding to the fw-select-option components used in Select.
         */
        "selectedOptions"?: any[];
        /**
          * Theme based on which the list box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Descriptive or instructional text displayed below the list box.
         */
        "stateText"?: string;
        /**
          * The variant of tag to be used.
         */
        "tagVariant"?: TagVariant;
        /**
          * Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated.
         */
        "type"?: 'text' | 'number';
        /**
          * Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "value"?: any;
        /**
          * The UI variant of the select to be used.
         */
        "variant"?: 'button' | 'standard' | 'mail';
    }
    interface FwSelectOption {
        /**
          * Place a checkbox.
         */
        "checkbox"?: boolean;
        /**
          * Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * The props for the graphics variant. ex., icon props in case of graphicsType = 'icon'
         */
        "graphicsProps"?: any;
        /**
          * Used in grouped list, provides the group in which the option belongs
         */
        "groupName"?: string;
        /**
          * States that the option is an HTML value. If the attribute's value is undefined, the value is set to true.
         */
        "html"?: boolean;
        /**
          * HTML content that is displayed as the option.
         */
        "htmlContent"?: string;
        /**
          * Triggered when an option loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when an option is focused.
         */
        "onFwFocus"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when an option is selected.
         */
        "onFwSelected"?: (event: CustomEvent<any>) => void;
        /**
          * Alternate text displayed on the interface, in place of the actual HTML content.
         */
        "optionText"?: string;
        /**
          * Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.
         */
        "selected"?: boolean;
        /**
          * Second line text can be description etc.
         */
        "subText"?: string;
        /**
          * The text to be displayed in the option.
         */
        "text"?: string;
        /**
          * Value corresponding to the option, that is saved  when the form data is saved.
         */
        "value"?: string;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "variant"?: DropdownVariant;
    }
    interface FwSkeleton {
        /**
          * Number of rows of current skeleton type
         */
        "count"?: number;
        /**
          * Custom css styles (background/margins/width/height etc.)
          * @type {({[k: string]: string} | string)}
         */
        "customStyles"?: { [key: string]: string } | string;
        /**
          * Effect the skeleton will use.
         */
        "effect"?: 'pulse' | 'sheen' | 'none';
        /**
          * Height of the skeleton ex. 100px, 100%, auto etc.
         */
        "height"?: string;
        /**
          * MarginBottom of the skeleton ex. 10px, 0 etc.
         */
        "marginBottom"?: string;
        /**
          * Variant of the skeleton - circle or rectangle or text
         */
        "variant"?: 'circle' | 'rect' | 'text';
        /**
          * Width of the skeleton ex. 100px, 100%, auto etc.
         */
        "width"?: string;
    }
    interface FwSpinner {
        /**
          * Color in which the loader is displayed, specified as a standard CSS color.
         */
        "color"?: string;
        /**
          * Size of the loader.
         */
        "size"?: 'small' | 'medium' | 'large' | 'default';
    }
    interface FwTab {
        /**
          * Determines whether the tab is active.
         */
        "active"?: boolean;
        /**
          * Disables this tab
         */
        "disabled"?: boolean;
        /**
          * The name of the tab panel which this tab controls.
         */
        "panel"?: string;
        /**
          * Header for the tab to be displayed.
         */
        "tabHeader"?: string;
        /**
          * Unique name of the tab.
         */
        "tabName"?: string;
    }
    interface FwTabPanel {
        /**
          * If true sets the panel display to block, none otherwise.
         */
        "active"?: boolean;
        /**
          * The panel name.
         */
        "name"?: string;
    }
    interface FwTabs {
        /**
          * The index of the activated Tab(Starts from 0)
         */
        "activeTabIndex"?: number;
        /**
          * The name of the tab to be activated.
         */
        "activeTabName"?: string;
        /**
          * Describes the purpose of set of tabs.
         */
        "label"?: string;
        /**
          * Triggered when a the view switches to a new tab.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * The style of tab headers that needs to be displayed, box will display headers in a container.
         */
        "variant"?: 'box' | 'normal';
    }
    interface FwTag {
        /**
          * Whether the Tag can be closed.
         */
        "closable"?: boolean;
        /**
          * Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: false;
        /**
          * Whether the Tag is focusable.
         */
        "focusable"?: boolean;
        /**
          * The props need to be passed for the variant. If the variant is avatar then use this prop to send the props for the fw-avatar component.
         */
        "graphicsProps"?: {};
        /**
          * Triggered when the tag is deselected.
         */
        "onFwClosed"?: (event: CustomEvent<any>) => void;
        /**
          * Display text in the tag component.
         */
        "text"?: string;
        /**
          * Value associated with the tag component, that is saved when the form data is saved.
         */
        "value"?: string;
        /**
          * The variant of tag to be displayed.
         */
        "variant"?: TagVariant;
    }
    interface FwTextarea {
        /**
          * Width of the input box, specified as number of columns.
         */
        "cols"?: number;
        /**
          * Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        "handleBlur"?: (_e: any, _o: any) => void;
        "handleFocus"?: (_e: any, _o: any) => void;
        "handleInput"?: (_e: any, _o: any) => void;
        /**
          * Label displayed on the interface, for the component.
         */
        "label"?: string;
        /**
          * Maximum number of characters a user can enter in the input box.
         */
        "maxlength"?: number;
        /**
          * Minimum number of characters a user must enter in the input box for the value to be valid.
         */
        "minlength"?: number;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the input box loses focus.
         */
        "onFwBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the value in the input box is modified.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the input box comes into focus.
         */
        "onFwFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when a value is entered in the input box.
         */
        "onFwInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Text displayed in the input box before a user enters a value.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly"?: boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Height of the input box, specified as number of rows.
         */
        "rows"?: number;
        /**
          * Theme based on which the input box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Descriptive or instructional text displayed below the input box.
         */
        "stateText"?: string;
        /**
          * Default value displayed in the input box.
         */
        "value"?: string | null;
        /**
          * Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved.
         */
        "wrap"?: 'soft' | 'hard';
    }
    interface FwTimepicker {
        /**
          * Set true to disable the element
         */
        "disabled"?: boolean;
        /**
          * Format in which time values are populated in the list box. If the value is hh:mm p, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format.
         */
        "format"?: 'hh:mm A' | 'HH:mm';
        "handleBlur"?: (_e: any, _o: any) => void;
        "handleChange"?: (_e: any, _o: any) => void;
        "handleFocus"?: (_e?: any, _o?: any) => void;
        /**
          * Time interval between the values displayed in the list, specified in minutes.
         */
        "interval"?: number;
        /**
          * Upper time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM.
         */
        "maxTime"?: string;
        /**
          * Lower time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM.
         */
        "minTime"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Time output value
         */
        "value"?: string;
    }
    interface FwToast {
        /**
          * The Content of the action link
         */
        "actionLinkText"?: string;
        /**
          * The content to be displayed in toast
         */
        "content"?: string;
        /**
          * Pause the toast from hiding on mouse hover
         */
        "pauseOnHover"?: boolean;
        /**
          * position of the toast notification in screen
         */
        "position"?: 'top-center' | 'top-left' | 'top-right';
        /**
          * won't close automatically
         */
        "sticky"?: boolean;
        /**
          * Time duration of the toast visibility
         */
        "timeout"?: number;
        /**
          * Type of the toast - success,failure, warning, inprogress
         */
        "type"?: 'success' | 'error' | 'warning' | 'inprogress';
    }
    interface FwToastMessage {
        /**
          * The Content of the action link
         */
        "actionLinkText"?: string;
        /**
          * The content to be displayed in toast
         */
        "content"?: string;
        /**
          * Triggered when the action link clicked.
         */
        "onFwLinkClick"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered on closing the toast message. This event gets used by the parent container to remove the toast message from itself
         */
        "onFwRemoveToast"?: (event: CustomEvent<any>) => void;
        /**
          * visibility prop of toast message
         */
        "open"?: boolean;
        /**
          * Pause the toast from hiding on mouse hover
         */
        "pauseOnHover"?: boolean;
        /**
          * won't close automatically
         */
        "sticky"?: boolean;
        /**
          * Time duration of the toast visibility
         */
        "timeout"?: number;
        /**
          * Type of the toast - success,failure, warning, inprogress
         */
        "type"?: 'success' | 'error' | 'warning' | 'inprogress';
    }
    interface FwToggle {
        /**
          * Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false.
         */
        "checked"?: boolean;
        /**
          * Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name"?: string;
        /**
          * Triggered when the input control is selected or deselected.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Specifies whether to show the check and cancel icons on toggle button. If the attribute’s value is undefined, the value is set to true.
         */
        "showIcon"?: boolean;
        /**
          * Size of the input control.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface FwToggleGroup {
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label"?: string;
        /**
          * Boolean value to allow multiple selection or single child selection
         */
        "multiple"?: boolean;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when an option in the Toggle Group is selected or deselected.
         */
        "onFwChange"?: (event: CustomEvent<any>) => void;
        /**
          * Selected items to be shown - stored in array format - if property "multiple" is set to false, this will always be a single value array
         */
        "value"?: any;
    }
    interface FwToggleGroupButton {
        /**
          * sets the default base class name and the rest of the class names for the other states are automatically appended to this
         */
        "baseClassName"?: string;
        /**
          * Label displayed as description in the card.
         */
        "description"?: string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Label displayed as header in the card.
         */
        "header"?: string;
        /**
          * If the button type is icon, set the icon path to be used
         */
        "iconName"?: string;
        /**
          * index attached inside the parent group component
         */
        "index"?: number;
        /**
          * Enables the component to be used as a part of multi selection group
         */
        "isCheckbox"?: boolean;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name"?: string;
        /**
          * Triggered when the card in focus is selected.
         */
        "onFwToggled"?: (event: CustomEvent<any>) => void;
        /**
          * Enables the component to be used as a toggle button or just to be used as a normal button
         */
        "selectable"?: boolean;
        /**
          * Sets the state to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "selected"?: boolean;
        /**
          * sets the type of the button
         */
        "type"?: 'card' | 'icon' | 'custom';
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value"?: string;
    }
    interface FwTooltip {
        /**
          * Content of the tooltip.
         */
        "content"?: string;
        /**
          * Distance defines the distance between the popover trigger and the popover content along y-axis.
         */
        "distance"?: string;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements"?: [PopoverPlacementType];
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Placement of the popover content with respect to the popover trigger.
         */
        "placement"?: PopoverPlacementType;
        /**
          * The trigger event on which the popover-content is displayed. The available options are 'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.
         */
        "trigger"?: PopoverTriggerType;
    }
    interface IntrinsicElements {
        "fw-accordion": FwAccordion;
        "fw-accordion-body": FwAccordionBody;
        "fw-accordion-title": FwAccordionTitle;
        "fw-avatar": FwAvatar;
        "fw-button": FwButton;
        "fw-button-group": FwButtonGroup;
        "fw-checkbox": FwCheckbox;
        "fw-custom-cell-anchor": FwCustomCellAnchor;
        "fw-custom-cell-user": FwCustomCellUser;
        "fw-data-table": FwDataTable;
        "fw-datepicker": FwDatepicker;
        "fw-dropdown-button": FwDropdownButton;
        "fw-form": FwForm;
        "fw-form-wrapper": FwFormWrapper;
        "fw-format-number": FwFormatNumber;
        "fw-icon": FwIcon;
        "fw-inline-message": FwInlineMessage;
        "fw-input": FwInput;
        "fw-label": FwLabel;
        "fw-list-options": FwListOptions;
        "fw-modal": FwModal;
        "fw-modal-content": FwModalContent;
        "fw-modal-footer": FwModalFooter;
        "fw-modal-title": FwModalTitle;
        "fw-pagination": FwPagination;
        "fw-popover": FwPopover;
        "fw-progress-loader": FwProgressLoader;
        "fw-radio": FwRadio;
        "fw-radio-group": FwRadioGroup;
        "fw-select": FwSelect;
        "fw-select-option": FwSelectOption;
        "fw-skeleton": FwSkeleton;
        "fw-spinner": FwSpinner;
        "fw-tab": FwTab;
        "fw-tab-panel": FwTabPanel;
        "fw-tabs": FwTabs;
        "fw-tag": FwTag;
        "fw-textarea": FwTextarea;
        "fw-timepicker": FwTimepicker;
        "fw-toast": FwToast;
        "fw-toast-message": FwToastMessage;
        "fw-toggle": FwToggle;
        "fw-toggle-group": FwToggleGroup;
        "fw-toggle-group-button": FwToggleGroupButton;
        "fw-tooltip": FwTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fw-accordion": LocalJSX.FwAccordion & JSXBase.HTMLAttributes<HTMLFwAccordionElement>;
            "fw-accordion-body": LocalJSX.FwAccordionBody & JSXBase.HTMLAttributes<HTMLFwAccordionBodyElement>;
            "fw-accordion-title": LocalJSX.FwAccordionTitle & JSXBase.HTMLAttributes<HTMLFwAccordionTitleElement>;
            "fw-avatar": LocalJSX.FwAvatar & JSXBase.HTMLAttributes<HTMLFwAvatarElement>;
            "fw-button": LocalJSX.FwButton & JSXBase.HTMLAttributes<HTMLFwButtonElement>;
            "fw-button-group": LocalJSX.FwButtonGroup & JSXBase.HTMLAttributes<HTMLFwButtonGroupElement>;
            "fw-checkbox": LocalJSX.FwCheckbox & JSXBase.HTMLAttributes<HTMLFwCheckboxElement>;
            "fw-custom-cell-anchor": LocalJSX.FwCustomCellAnchor & JSXBase.HTMLAttributes<HTMLFwCustomCellAnchorElement>;
            "fw-custom-cell-user": LocalJSX.FwCustomCellUser & JSXBase.HTMLAttributes<HTMLFwCustomCellUserElement>;
            "fw-data-table": LocalJSX.FwDataTable & JSXBase.HTMLAttributes<HTMLFwDataTableElement>;
            "fw-datepicker": LocalJSX.FwDatepicker & JSXBase.HTMLAttributes<HTMLFwDatepickerElement>;
            "fw-dropdown-button": LocalJSX.FwDropdownButton & JSXBase.HTMLAttributes<HTMLFwDropdownButtonElement>;
            "fw-form": LocalJSX.FwForm & JSXBase.HTMLAttributes<HTMLFwFormElement>;
            "fw-form-wrapper": LocalJSX.FwFormWrapper & JSXBase.HTMLAttributes<HTMLFwFormWrapperElement>;
            "fw-format-number": LocalJSX.FwFormatNumber & JSXBase.HTMLAttributes<HTMLFwFormatNumberElement>;
            "fw-icon": LocalJSX.FwIcon & JSXBase.HTMLAttributes<HTMLFwIconElement>;
            "fw-inline-message": LocalJSX.FwInlineMessage & JSXBase.HTMLAttributes<HTMLFwInlineMessageElement>;
            "fw-input": LocalJSX.FwInput & JSXBase.HTMLAttributes<HTMLFwInputElement>;
            "fw-label": LocalJSX.FwLabel & JSXBase.HTMLAttributes<HTMLFwLabelElement>;
            "fw-list-options": LocalJSX.FwListOptions & JSXBase.HTMLAttributes<HTMLFwListOptionsElement>;
            "fw-modal": LocalJSX.FwModal & JSXBase.HTMLAttributes<HTMLFwModalElement>;
            "fw-modal-content": LocalJSX.FwModalContent & JSXBase.HTMLAttributes<HTMLFwModalContentElement>;
            "fw-modal-footer": LocalJSX.FwModalFooter & JSXBase.HTMLAttributes<HTMLFwModalFooterElement>;
            "fw-modal-title": LocalJSX.FwModalTitle & JSXBase.HTMLAttributes<HTMLFwModalTitleElement>;
            "fw-pagination": LocalJSX.FwPagination & JSXBase.HTMLAttributes<HTMLFwPaginationElement>;
            "fw-popover": LocalJSX.FwPopover & JSXBase.HTMLAttributes<HTMLFwPopoverElement>;
            "fw-progress-loader": LocalJSX.FwProgressLoader & JSXBase.HTMLAttributes<HTMLFwProgressLoaderElement>;
            "fw-radio": LocalJSX.FwRadio & JSXBase.HTMLAttributes<HTMLFwRadioElement>;
            "fw-radio-group": LocalJSX.FwRadioGroup & JSXBase.HTMLAttributes<HTMLFwRadioGroupElement>;
            "fw-select": LocalJSX.FwSelect & JSXBase.HTMLAttributes<HTMLFwSelectElement>;
            "fw-select-option": LocalJSX.FwSelectOption & JSXBase.HTMLAttributes<HTMLFwSelectOptionElement>;
            "fw-skeleton": LocalJSX.FwSkeleton & JSXBase.HTMLAttributes<HTMLFwSkeletonElement>;
            "fw-spinner": LocalJSX.FwSpinner & JSXBase.HTMLAttributes<HTMLFwSpinnerElement>;
            "fw-tab": LocalJSX.FwTab & JSXBase.HTMLAttributes<HTMLFwTabElement>;
            "fw-tab-panel": LocalJSX.FwTabPanel & JSXBase.HTMLAttributes<HTMLFwTabPanelElement>;
            "fw-tabs": LocalJSX.FwTabs & JSXBase.HTMLAttributes<HTMLFwTabsElement>;
            "fw-tag": LocalJSX.FwTag & JSXBase.HTMLAttributes<HTMLFwTagElement>;
            "fw-textarea": LocalJSX.FwTextarea & JSXBase.HTMLAttributes<HTMLFwTextareaElement>;
            "fw-timepicker": LocalJSX.FwTimepicker & JSXBase.HTMLAttributes<HTMLFwTimepickerElement>;
            "fw-toast": LocalJSX.FwToast & JSXBase.HTMLAttributes<HTMLFwToastElement>;
            "fw-toast-message": LocalJSX.FwToastMessage & JSXBase.HTMLAttributes<HTMLFwToastMessageElement>;
            "fw-toggle": LocalJSX.FwToggle & JSXBase.HTMLAttributes<HTMLFwToggleElement>;
            "fw-toggle-group": LocalJSX.FwToggleGroup & JSXBase.HTMLAttributes<HTMLFwToggleGroupElement>;
            "fw-toggle-group-button": LocalJSX.FwToggleGroupButton & JSXBase.HTMLAttributes<HTMLFwToggleGroupButtonElement>;
            "fw-tooltip": LocalJSX.FwTooltip & JSXBase.HTMLAttributes<HTMLFwTooltipElement>;
        }
    }
}
